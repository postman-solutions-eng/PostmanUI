@layout Layout

<div x-data="postmanUI()" x-init="init()">
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <section class="bg-white rounded-lg shadow-md p-6">
            <h2 class="text-2xl font-semibold mb-4 text-gray-700">OpenAPI Viewer</h2>
            <div id="json-viewer" class="pt-4 text-lg overflow-auto max-h-[calc(100vh-300px)]"></div>
        </section>

        <section class="bg-white rounded-lg shadow-md p-6">
            <h2 class="text-2xl font-semibold mb-4 text-gray-700">Collection Builder</h2>
            <div id="tab-content" role="tabpanel" class="tab-content">
                <div class="space-y-6">
                    <div class="flex justify-between items-center">
                        <div class="flex space-x-4">
                            <button id="generate" @click="generate()" class="px-5 py-2 bg-orange-500 text-white rounded-md hover:bg-orange-600 transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-opacity-50">
                                Generate
                            </button>
                            <button id="toggleSelect" @click="toggleSelect()" class="px-5 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-opacity-50">
                                <span x-text="selectAllState ? 'Deselect All' : 'Select All'"></span>
                            </button>
                        </div>
                        <div class="flex items-center space-x-2">
                            <label for="workspaceId" class="text-sm font-medium text-gray-700">Workspace ID</label>
                            <input type="text" id="workspaceId" class="px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-orange-500 focus:border-orange-500 transition duration-150 ease-in-out">
                        </div>
                    </div>

                    <div id="swagger-paths-container" class="overflow-auto max-h-[calc(100vh-400px)]">
                        <template x-for="(paths, groupKey) in groupedPaths" :key="groupKey">
                            <div class="mb-4 border border-gray-200 rounded-lg overflow-hidden">
                                <div class="bg-gray-100 px-4 py-3 flex items-center justify-between cursor-pointer" @click="toggleGroupHidden(groupKey)">
                                    <div class="flex items-center">
                                        <template x-if="paths.length > 5">
                                            <input type="checkbox" name="paths" class="mr-3 h-5 w-5 accent-orange-600 border-gray-300 rounded" :checked="paths.every(path => selectedPaths[path])" @click.stop="toggleGroupSelection(groupKey, $event.target.checked)">
                                        </template>
                                        <h3 class="font-semibold text-lg text-gray-800" x-text="groupKey"></h3>
                                    </div>
                                    <i :class="{'fas fa-chevron-down': !groupHidden[groupKey], 'fas fa-chevron-up': groupHidden[groupKey]}"></i>
                                </div>
                                <div :class="{'hidden': groupHidden[groupKey]}" class="p-4">
                                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                                        <template x-for="path in paths" :key="path">
                                            <div class="flex items-center p-2 rounded-md transition-colors hover:bg-gray-100">
                                                <input type="checkbox" :id="path" name="paths" :value="path" class="mr-3 h-5 w-5 accent-orange-600 border-gray-300 rounded" :checked="selectedPaths[path]" @click="togglePath(path); updateSwaggerContent()">
                                                <label :for="path" class="text-sm text-gray-700 flex-grow cursor-pointer" x-text="path"></label>
                                            </div>
                                        </template>
                                    </div>
                                </div>
                            </div>
                        </template>
                    </div>
                </div>
            </div>
        </section>
    </div>
</div>
<script suppress-error="BL9992">
    function postmanUI() {
        return {
            swaggerDocument: null,
            selectedPaths: {},
            swaggerContent: null,
            groupedPaths: {},
            groupHidden: {},
            selectAllState: true,

            async init() {
                await this.initSwagger();
                this.initSelectedPaths();
                this.initializeJsonViewer();
                await this.loadAndDisplaySwaggerPaths();
            },

            async initSwagger() {
                const response = await fetch('/swagger/v1/swagger.json');
                this.swaggerDocument = await response.json();
                this.swaggerContent = { ...this.swaggerDocument };
            },

            initSelectedPaths() {
                if (this.swaggerDocument && this.swaggerDocument.paths) {
                    Object.keys(this.swaggerDocument.paths).forEach(path => {
                        this.selectedPaths[ path ] = true;
                    });
                }
            },

            togglePath(path) {
                this.selectedPaths[ path ] = !this.selectedPaths[ path ];
                this.updateSwaggerContent();
            },

            initializeJsonViewer() {
                if (this.swaggerContent) {
                    window.viewer = new JsonViewer({ value: this.swaggerContent });
                    window.viewer.render('#json-viewer');
                }
            },

            updateSwaggerContent() {
                let checkedPaths = {};
                Object.keys(this.selectedPaths).forEach(path => {
                    if (this.selectedPaths[ path ] && this.swaggerDocument.paths[ path ]) {
                        checkedPaths[ path ] = this.swaggerDocument.paths[ path ];
                    }
                });
                this.swaggerContent = { ...this.swaggerDocument, paths: checkedPaths };
                if (window.viewer) {
                    const jsonViewer = document.getElementById('json-viewer');
                    jsonViewer.innerHTML = '';
                    window.viewer = new JsonViewer({
                        value: this.swaggerContent,
                        expanded: true  // Set to true to expand all nodes initially
                    });
                    window.viewer.render('#json-viewer');
                }
            },

            async loadAndDisplaySwaggerPaths() {
                const swaggerPaths = this.swaggerContent.paths;

                this.groupedPaths = Object.keys(swaggerPaths).reduce((acc, path) => {
                    const groupKey = path.split('/')[ 1 ];
                    if (!acc[ groupKey ]) {
                        acc[ groupKey ] = [];
                        this.groupHidden[ groupKey ] = false;
                    }
                    acc[ groupKey ].push(path);
                    return acc;
                }, {});
            },

            toggleSelect() {
                this.selectAllState = !this.selectAllState;
                Object.keys(this.groupedPaths).forEach(groupKey => {
                    this.groupedPaths[ groupKey ].forEach(path => {
                        this.selectedPaths[ path ] = this.selectAllState;
                    });
                });
                this.updateSwaggerContent();
            },

            toggleGroupSelection(groupId, isChecked) {
                this.groupedPaths[ groupId ].forEach(path => {
                    this.selectedPaths[ path ] = isChecked;
                });
                this.updateSwaggerContent();
            },

            toggleGroupHidden(groupId) {
                this.groupHidden[ groupId ] = !this.groupHidden[ groupId ];
            },

            async generate() {
                const apiKeyInput = document.getElementById('apiKey').value;
                const workspaceIdInput = document.getElementById('workspaceId').value;

                let reqBody = {
                    type: 'json',
                    options: {
                        'folderStrategy': 'Path',
                        'disableOptionalParameters': true,
                        'exampleParametersResolution': 'Examples'
                    },
                    input: this.swaggerContent
                };

                let url = 'https://api.getpostman.com/import/openapi';
                if (workspaceIdInput) {
                    url += `?workspace=${workspaceIdInput}`;
                }

                try {
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Api-Key': apiKeyInput
                        },
                        body: JSON.stringify(reqBody)
                    });

                    if (!response.ok) {
                        const body = await response.json();
                        alert('API call failed with response: ' + JSON.stringify(body));
                    } else {
                        Swal.fire({
                            title: 'Collection created in "My Workspace"',
                            confirmButtonColor: '#f97316',
                        });
                        const data = await response.json();
                        console.log(data);
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            }
        }
    }
</script>
