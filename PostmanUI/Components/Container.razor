@using PostmanUI
@using Microsoft.OpenApi.Models
@using System.Text.Json;
@using Microsoft.AspNetCore.Http;
@using System.Net.Http.Json;

@inject IHttpClientFactory client
@inject IHttpContextAccessor context

<div class="flex flex-row h-screen" id="conversion">
    <div class="w-1/3 h-full border-b border-black bg-gray-100 overflow-auto scrollbar-hide">
        <h2 class="text-lg font-bold p-2 text-center">.NET API Specification</h2>

        <div id="json-viewer" class="pt-4"></div>
        <script src="https://cdn.jsdelivr.net/npm/@@textea/json-viewer@3" suppress-error="BL9992"></script>

    </div>

    <div class="w-1/3 h-full bg-gray-100 flex flex-col text-lg">
        <h2 class="text-lg font-bold p-2 text-center">Build Collection</h2>
        <div class="pt-4">
            <CollectionBuilder Swagger="Swagger" />
        </div>
    </div>

    <div class="w-1/3 h-full bg-gray-200 flex flex-col text-lg">
        <h2 class="text-lg font-bold p-2 text-center">Generated Collection</h2>
        <div class="p-4">
        </div>
    </div>
</div>

@code {
    private string swaggerJson;
    private OpenApiDocument Swagger;

    private JsonSerializerOptions jsonOptions = new JsonSerializerOptions
        {
            WriteIndented = true,
            Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
        };

    // Initialize swaggerJson with the serialized swagger document
    protected override async Task OnInitializedAsync()
    {
        using var httpClient = client.CreateClient();

        var getLocalSwaggerDocument = await httpClient.GetAsync($"https://{context.HttpContext.Request.Host}/swagger/v1/swagger.json");

        Swagger = await getLocalSwaggerDocument.Content.ReadFromJsonAsync<OpenApiDocument>();

        // serialize with system text json
        swaggerJson = JsonSerializer.Serialize(Swagger, jsonOptions);
    }
}


<script suppress-error="BL9992">
    let swaggerContent = JSON.parse(@((MarkupString)JsonSerializer.Serialize(swaggerJson, jsonOptions)));
    let originalContent = { ...swaggerContent };

    let viewer = initializeJsonViewer();

    function initializeJsonViewer() {
        let viewer = new JsonViewer({ value: swaggerContent.Paths }).render('#json-viewer');
        return viewer;
    }

    function updateSwaggerDocument() {
        swaggerContent = { ...originalContent };

        let checkedPaths = {};
        document.querySelectorAll('input[name="paths"]:checked').forEach((checkbox) => {
            let pathKey = checkbox.value;
            if (swaggerContent.Paths && swaggerContent.Paths[ pathKey ]) {
                checkedPaths[ pathKey ] = swaggerContent.Paths[ pathKey ];
            }
        });

        // Modify the Swagger object to keep only checked paths, and update the viewer
        swaggerContent.Paths = checkedPaths;
        viewer = new JsonViewer({ value: swaggerContent.Paths }).render('#json-viewer');
    }
</script>


<style>
    .scrollbar-hide::-webkit-scrollbar {
        display: none;
    }

    .scrollbar-hide {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }
</style>